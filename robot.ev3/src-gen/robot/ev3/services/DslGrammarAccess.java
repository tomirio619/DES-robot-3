/*
 * generated by Xtext 2.10.0
 */
package robot.ev3.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_1_0 = (RuleCall)cTasksAssignment_1.eContents().get(0);
		
		/// *
		// * A mission consists of a number of behaviors
		// * / Mission:
		//	'Mission:' tasks+=Task+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mission:' tasks+=Task+
		public Group getGroup() { return cGroup; }
		
		//'Mission:'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//tasks+=Task+
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_1_0() { return cTasksTaskParserRuleCall_1_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorSensorTypeParserRuleCall_2_1_0 = (RuleCall)cSensorAssignment_2_1.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionActionsEnumRuleCall_4_0 = (RuleCall)cActionAssignment_4.eContents().get(0);
		private final Keyword cNotKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIgnoreBehaviorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIgnoreBehaviorIgnorablesParserRuleCall_6_0 = (RuleCall)cIgnoreBehaviorAssignment_6.eContents().get(0);
		
		/// *
		// * Mission DetectColourLakeAndMeasure
		// * Task findLake 
		// * Uses ColorSensor On New DetectedColor is: [kleuren] Do: Measure
		// * 
		// * Mission DetectRocksAndMeasure
		// * Task findRock
		// * Uses TouchSensor On TouchedSide [Any] Do: Measure
		// * 
		// * Mission CleanUpLightWeightRocks
		// * Task pushRocks
		// * Uses TouchSensor On TouchedSide [Any] Do: DriveToEdge
		// * Not AvoidObjects
		// * 
		// * [Optional]
		// * Mission ParkInCorner
		// * Task findEdge
		// * Do: DriveToEdge Do: TurnLeft Do: DriveToEdge Do: Stop 
		// * 
		// * / / *
		// * A behavior consists of a name, an optional type (in case of driving), an optional priority
		// * and a take control definition.
		// * / Task:
		//	'Task:' name=ID ('Uses:' sensor=SensorType)?
		//	'Do:' action=Actions
		//	'Not:' ignoreBehavior?=Ignorables;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task:' name=ID ('Uses:' sensor=SensorType)? 'Do:' action=Actions 'Not:' ignoreBehavior?=Ignorables
		public Group getGroup() { return cGroup; }
		
		//'Task:'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('Uses:' sensor=SensorType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Uses:'
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }
		
		//sensor=SensorType
		public Assignment getSensorAssignment_2_1() { return cSensorAssignment_2_1; }
		
		//SensorType
		public RuleCall getSensorSensorTypeParserRuleCall_2_1_0() { return cSensorSensorTypeParserRuleCall_2_1_0; }
		
		//'Do:'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//action=Actions
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }
		
		//Actions
		public RuleCall getActionActionsEnumRuleCall_4_0() { return cActionActionsEnumRuleCall_4_0; }
		
		//'Not:'
		public Keyword getNotKeyword_5() { return cNotKeyword_5; }
		
		//ignoreBehavior?=Ignorables
		public Assignment getIgnoreBehaviorAssignment_6() { return cIgnoreBehaviorAssignment_6; }
		
		//Ignorables
		public RuleCall getIgnoreBehaviorIgnorablesParserRuleCall_6_0() { return cIgnoreBehaviorIgnorablesParserRuleCall_6_0; }
	}
	public class IgnorablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.Ignorables");
		private final Assignment cAVOID_OBJECTSAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAVOID_OBJECTSAvoidObjectsKeyword_0 = (Keyword)cAVOID_OBJECTSAssignment.eContents().get(0);
		
		//Ignorables:
		//	AVOID_OBJECTS="AvoidObjects";
		@Override public ParserRule getRule() { return rule; }
		
		//AVOID_OBJECTS="AvoidObjects"
		public Assignment getAVOID_OBJECTSAssignment() { return cAVOID_OBJECTSAssignment; }
		
		//"AvoidObjects"
		public Keyword getAVOID_OBJECTSAvoidObjectsKeyword_0() { return cAVOID_OBJECTSAvoidObjectsKeyword_0; }
	}
	public class SensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.SensorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTouchSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUltrasonicSensorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SensorType:
		//	ColorSensor | TouchSensor | UltrasonicSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//ColorSensor | TouchSensor | UltrasonicSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColorSensor
		public RuleCall getColorSensorParserRuleCall_0() { return cColorSensorParserRuleCall_0; }
		
		//TouchSensor
		public RuleCall getTouchSensorParserRuleCall_1() { return cTouchSensorParserRuleCall_1; }
		
		//UltrasonicSensor
		public RuleCall getUltrasonicSensorParserRuleCall_2() { return cUltrasonicSensorParserRuleCall_2; }
	}
	public class ColorSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.ColorSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDetectedColorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyColorsEnumRuleCall_4_0 = (RuleCall)cKeyAssignment_4.eContents().get(0);
		
		//ColorSensor:
		//	'ColorSensor' 'On' 'DetectedColor' 'is:' key=Colors;
		@Override public ParserRule getRule() { return rule; }
		
		//'ColorSensor' 'On' 'DetectedColor' 'is:' key=Colors
		public Group getGroup() { return cGroup; }
		
		//'ColorSensor'
		public Keyword getColorSensorKeyword_0() { return cColorSensorKeyword_0; }
		
		//'On'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//'DetectedColor'
		public Keyword getDetectedColorKeyword_2() { return cDetectedColorKeyword_2; }
		
		//'is:'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//key=Colors
		public Assignment getKeyAssignment_4() { return cKeyAssignment_4; }
		
		//Colors
		public RuleCall getKeyColorsEnumRuleCall_4_0() { return cKeyColorsEnumRuleCall_4_0; }
	}
	public class TouchSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.TouchSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTouchSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTouchedSideKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeyTouchSensorSidesEnumRuleCall_3_0 = (RuleCall)cKeyAssignment_3.eContents().get(0);
		
		//TouchSensor:
		//	'TouchSensor' 'On' 'TouchedSide:' key=TouchSensorSides;
		@Override public ParserRule getRule() { return rule; }
		
		//'TouchSensor' 'On' 'TouchedSide:' key=TouchSensorSides
		public Group getGroup() { return cGroup; }
		
		//'TouchSensor'
		public Keyword getTouchSensorKeyword_0() { return cTouchSensorKeyword_0; }
		
		//'On'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//'TouchedSide:'
		public Keyword getTouchedSideKeyword_2() { return cTouchedSideKeyword_2; }
		
		//key=TouchSensorSides
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//TouchSensorSides
		public RuleCall getKeyTouchSensorSidesEnumRuleCall_3_0() { return cKeyTouchSensorSidesEnumRuleCall_3_0; }
	}
	public class UltrasonicSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.UltrasonicSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparatorCompareOperatorEnumRuleCall_3_0 = (RuleCall)cComparatorAssignment_3.eContents().get(0);
		private final Assignment cDistanceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDistanceDECIMALTerminalRuleCall_4_0 = (RuleCall)cDistanceAssignment_4.eContents().get(0);
		
		//UltrasonicSensor:
		//	'USensor' 'On' 'Distance:' comparator=CompareOperator distance=DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'USensor' 'On' 'Distance:' comparator=CompareOperator distance=DECIMAL
		public Group getGroup() { return cGroup; }
		
		//'USensor'
		public Keyword getUSensorKeyword_0() { return cUSensorKeyword_0; }
		
		//'On'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//'Distance:'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//comparator=CompareOperator
		public Assignment getComparatorAssignment_3() { return cComparatorAssignment_3; }
		
		//CompareOperator
		public RuleCall getComparatorCompareOperatorEnumRuleCall_3_0() { return cComparatorCompareOperatorEnumRuleCall_3_0; }
		
		//distance=DECIMAL
		public Assignment getDistanceAssignment_4() { return cDistanceAssignment_4; }
		
		//DECIMAL
		public RuleCall getDistanceDECIMALTerminalRuleCall_4_0() { return cDistanceDECIMALTerminalRuleCall_4_0; }
	}
	
	public class TouchSensorSidesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.TouchSensorSides");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLEFTKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTRIGHTKeyword_1_0 = (Keyword)cRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOTHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOTHBOTHKeyword_2_0 = (Keyword)cBOTHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TouchSensorSides:
		//	LEFT |
		//	RIGHT |
		//	BOTH;
		public EnumRule getRule() { return rule; }
		
		//LEFT | RIGHT | BOTH
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }
		
		//"LEFT"
		public Keyword getLEFTLEFTKeyword_0_0() { return cLEFTLEFTKeyword_0_0; }
		
		//RIGHT
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_1() { return cRIGHTEnumLiteralDeclaration_1; }
		
		//"RIGHT"
		public Keyword getRIGHTRIGHTKeyword_1_0() { return cRIGHTRIGHTKeyword_1_0; }
		
		//BOTH
		public EnumLiteralDeclaration getBOTHEnumLiteralDeclaration_2() { return cBOTHEnumLiteralDeclaration_2; }
		
		//"BOTH"
		public Keyword getBOTHBOTHKeyword_2_0() { return cBOTHBOTHKeyword_2_0; }
	}
	public class ActionsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cROTATE_LEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cROTATE_LROTATELEFTKeyword_0_0 = (Keyword)cROTATE_LEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cROTATE_REnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cROTATE_RROTATERIGHTKeyword_1_0 = (Keyword)cROTATE_REnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDRIVE_FORWARDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDRIVE_FORWARDDRIVEFORWARDKeyword_2_0 = (Keyword)cDRIVE_FORWARDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDRIVE_BACKWARDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDRIVE_BACKWARDDRIVEBACKWARDKeyword_3_0 = (Keyword)cDRIVE_BACKWARDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTOP_DRIVINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTOP_DRIVINGSTOPKeyword_4_0 = (Keyword)cSTOP_DRIVINGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTURN_AROUNDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTURN_AROUNDTURNAROUNDKeyword_5_0 = (Keyword)cTURN_AROUNDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBEEPEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBEEPBEEPKeyword_6_0 = (Keyword)cBEEPEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMEASUREEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMEASUREMEASUREKeyword_7_0 = (Keyword)cMEASUREEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDRIVETOEDGEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDRIVETOEDGEDRIVETOEDGEKeyword_8_0 = (Keyword)cDRIVETOEDGEEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum Actions:
		//	ROTATE_L="ROTATELEFT" |
		//	ROTATE_R="ROTATERIGHT" |
		//	DRIVE_FORWARD="DRIVEFORWARD" |
		//	DRIVE_BACKWARD="DRIVEBACKWARD" |
		//	STOP_DRIVING="STOP" |
		//	TURN_AROUND="TURNAROUND" |
		//	BEEP |
		//	MEASURE |
		//	DRIVETOEDGE;
		public EnumRule getRule() { return rule; }
		
		//ROTATE_L="ROTATELEFT" | ROTATE_R="ROTATERIGHT" | DRIVE_FORWARD="DRIVEFORWARD" | DRIVE_BACKWARD="DRIVEBACKWARD" |
		//STOP_DRIVING="STOP" | TURN_AROUND="TURNAROUND" | BEEP | MEASURE | DRIVETOEDGE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ROTATE_L="ROTATELEFT"
		public EnumLiteralDeclaration getROTATE_LEnumLiteralDeclaration_0() { return cROTATE_LEnumLiteralDeclaration_0; }
		
		//"ROTATELEFT"
		public Keyword getROTATE_LROTATELEFTKeyword_0_0() { return cROTATE_LROTATELEFTKeyword_0_0; }
		
		//ROTATE_R="ROTATERIGHT"
		public EnumLiteralDeclaration getROTATE_REnumLiteralDeclaration_1() { return cROTATE_REnumLiteralDeclaration_1; }
		
		//"ROTATERIGHT"
		public Keyword getROTATE_RROTATERIGHTKeyword_1_0() { return cROTATE_RROTATERIGHTKeyword_1_0; }
		
		//DRIVE_FORWARD="DRIVEFORWARD"
		public EnumLiteralDeclaration getDRIVE_FORWARDEnumLiteralDeclaration_2() { return cDRIVE_FORWARDEnumLiteralDeclaration_2; }
		
		//"DRIVEFORWARD"
		public Keyword getDRIVE_FORWARDDRIVEFORWARDKeyword_2_0() { return cDRIVE_FORWARDDRIVEFORWARDKeyword_2_0; }
		
		//DRIVE_BACKWARD="DRIVEBACKWARD"
		public EnumLiteralDeclaration getDRIVE_BACKWARDEnumLiteralDeclaration_3() { return cDRIVE_BACKWARDEnumLiteralDeclaration_3; }
		
		//"DRIVEBACKWARD"
		public Keyword getDRIVE_BACKWARDDRIVEBACKWARDKeyword_3_0() { return cDRIVE_BACKWARDDRIVEBACKWARDKeyword_3_0; }
		
		//STOP_DRIVING="STOP"
		public EnumLiteralDeclaration getSTOP_DRIVINGEnumLiteralDeclaration_4() { return cSTOP_DRIVINGEnumLiteralDeclaration_4; }
		
		//"STOP"
		public Keyword getSTOP_DRIVINGSTOPKeyword_4_0() { return cSTOP_DRIVINGSTOPKeyword_4_0; }
		
		//TURN_AROUND="TURNAROUND"
		public EnumLiteralDeclaration getTURN_AROUNDEnumLiteralDeclaration_5() { return cTURN_AROUNDEnumLiteralDeclaration_5; }
		
		//"TURNAROUND"
		public Keyword getTURN_AROUNDTURNAROUNDKeyword_5_0() { return cTURN_AROUNDTURNAROUNDKeyword_5_0; }
		
		//BEEP
		public EnumLiteralDeclaration getBEEPEnumLiteralDeclaration_6() { return cBEEPEnumLiteralDeclaration_6; }
		
		//"BEEP"
		public Keyword getBEEPBEEPKeyword_6_0() { return cBEEPBEEPKeyword_6_0; }
		
		//MEASURE
		public EnumLiteralDeclaration getMEASUREEnumLiteralDeclaration_7() { return cMEASUREEnumLiteralDeclaration_7; }
		
		//"MEASURE"
		public Keyword getMEASUREMEASUREKeyword_7_0() { return cMEASUREMEASUREKeyword_7_0; }
		
		//DRIVETOEDGE
		public EnumLiteralDeclaration getDRIVETOEDGEEnumLiteralDeclaration_8() { return cDRIVETOEDGEEnumLiteralDeclaration_8; }
		
		//"DRIVETOEDGE"
		public Keyword getDRIVETOEDGEDRIVETOEDGEKeyword_8_0() { return cDRIVETOEDGEDRIVETOEDGEKeyword_8_0; }
	}
	public class DirectionsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.Directions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNNKeyword_0_0 = (Keyword)cNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNENEKeyword_1_0 = (Keyword)cNEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEEKeyword_2_0 = (Keyword)cEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSESEKeyword_3_0 = (Keyword)cSEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSSKeyword_4_0 = (Keyword)cSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSWEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSWSWKeyword_5_0 = (Keyword)cSWEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWWKeyword_6_0 = (Keyword)cWEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNWEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNWNWKeyword_7_0 = (Keyword)cNWEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Directions:
		//	N |
		//	NE |
		//	E |
		//	SE |
		//	S |
		//	SW |
		//	W |
		//	NW;
		public EnumRule getRule() { return rule; }
		
		//N | NE | E | SE | S | SW | W | NW
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//N
		public EnumLiteralDeclaration getNEnumLiteralDeclaration_0() { return cNEnumLiteralDeclaration_0; }
		
		//"N"
		public Keyword getNNKeyword_0_0() { return cNNKeyword_0_0; }
		
		//NE
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_1() { return cNEEnumLiteralDeclaration_1; }
		
		//"NE"
		public Keyword getNENEKeyword_1_0() { return cNENEKeyword_1_0; }
		
		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_2() { return cEEnumLiteralDeclaration_2; }
		
		//"E"
		public Keyword getEEKeyword_2_0() { return cEEKeyword_2_0; }
		
		//SE
		public EnumLiteralDeclaration getSEEnumLiteralDeclaration_3() { return cSEEnumLiteralDeclaration_3; }
		
		//"SE"
		public Keyword getSESEKeyword_3_0() { return cSESEKeyword_3_0; }
		
		//S
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_4() { return cSEnumLiteralDeclaration_4; }
		
		//"S"
		public Keyword getSSKeyword_4_0() { return cSSKeyword_4_0; }
		
		//SW
		public EnumLiteralDeclaration getSWEnumLiteralDeclaration_5() { return cSWEnumLiteralDeclaration_5; }
		
		//"SW"
		public Keyword getSWSWKeyword_5_0() { return cSWSWKeyword_5_0; }
		
		//W
		public EnumLiteralDeclaration getWEnumLiteralDeclaration_6() { return cWEnumLiteralDeclaration_6; }
		
		//"W"
		public Keyword getWWKeyword_6_0() { return cWWKeyword_6_0; }
		
		//NW
		public EnumLiteralDeclaration getNWEnumLiteralDeclaration_7() { return cNWEnumLiteralDeclaration_7; }
		
		//"NW"
		public Keyword getNWNWKeyword_7_0() { return cNWNWKeyword_7_0; }
	}
	public class ColorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.Colors");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBLACKBLACKKeyword_0_0 = (Keyword)cBLACKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLUEBLUEKeyword_1_0 = (Keyword)cBLUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCYANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCYANCYANKeyword_2_0 = (Keyword)cCYANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_GRAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDARK_GRAYDARK_GRAYKeyword_3_0 = (Keyword)cDARK_GRAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGRAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGRAYGRAYKeyword_4_0 = (Keyword)cGRAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREENGREENKeyword_5_0 = (Keyword)cGREENEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_GRAYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLIGHT_GRAYLIGHT_GRAYKeyword_6_0 = (Keyword)cLIGHT_GRAYEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMAGENTAEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMAGENTAMAGENTAKeyword_7_0 = (Keyword)cMAGENTAEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cORANGEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cORANGEORANGEKeyword_8_0 = (Keyword)cORANGEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPINKEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPINKPINKKeyword_9_0 = (Keyword)cPINKEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cREDREDKeyword_10_0 = (Keyword)cREDEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cWHITEWHITEKeyword_11_0 = (Keyword)cWHITEEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cYELLOWYELLOWKeyword_12_0 = (Keyword)cYELLOWEnumLiteralDeclaration_12.eContents().get(0);
		
		//enum Colors:
		//	BLACK |
		//	BLUE |
		//	CYAN |
		//	DARK_GRAY |
		//	GRAY |
		//	GREEN |
		//	LIGHT_GRAY |
		//	MAGENTA |
		//	ORANGE |
		//	PINK |
		//	RED |
		//	WHITE |
		//	YELLOW;
		public EnumRule getRule() { return rule; }
		
		//BLACK | BLUE | CYAN | DARK_GRAY | GRAY | GREEN | LIGHT_GRAY | MAGENTA | ORANGE | PINK | RED | WHITE | YELLOW
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BLACK
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_0() { return cBLACKEnumLiteralDeclaration_0; }
		
		//"BLACK"
		public Keyword getBLACKBLACKKeyword_0_0() { return cBLACKBLACKKeyword_0_0; }
		
		//BLUE
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_1() { return cBLUEEnumLiteralDeclaration_1; }
		
		//"BLUE"
		public Keyword getBLUEBLUEKeyword_1_0() { return cBLUEBLUEKeyword_1_0; }
		
		//CYAN
		public EnumLiteralDeclaration getCYANEnumLiteralDeclaration_2() { return cCYANEnumLiteralDeclaration_2; }
		
		//"CYAN"
		public Keyword getCYANCYANKeyword_2_0() { return cCYANCYANKeyword_2_0; }
		
		//DARK_GRAY
		public EnumLiteralDeclaration getDARK_GRAYEnumLiteralDeclaration_3() { return cDARK_GRAYEnumLiteralDeclaration_3; }
		
		//"DARK_GRAY"
		public Keyword getDARK_GRAYDARK_GRAYKeyword_3_0() { return cDARK_GRAYDARK_GRAYKeyword_3_0; }
		
		//GRAY
		public EnumLiteralDeclaration getGRAYEnumLiteralDeclaration_4() { return cGRAYEnumLiteralDeclaration_4; }
		
		//"GRAY"
		public Keyword getGRAYGRAYKeyword_4_0() { return cGRAYGRAYKeyword_4_0; }
		
		//GREEN
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_5() { return cGREENEnumLiteralDeclaration_5; }
		
		//"GREEN"
		public Keyword getGREENGREENKeyword_5_0() { return cGREENGREENKeyword_5_0; }
		
		//LIGHT_GRAY
		public EnumLiteralDeclaration getLIGHT_GRAYEnumLiteralDeclaration_6() { return cLIGHT_GRAYEnumLiteralDeclaration_6; }
		
		//"LIGHT_GRAY"
		public Keyword getLIGHT_GRAYLIGHT_GRAYKeyword_6_0() { return cLIGHT_GRAYLIGHT_GRAYKeyword_6_0; }
		
		//MAGENTA
		public EnumLiteralDeclaration getMAGENTAEnumLiteralDeclaration_7() { return cMAGENTAEnumLiteralDeclaration_7; }
		
		//"MAGENTA"
		public Keyword getMAGENTAMAGENTAKeyword_7_0() { return cMAGENTAMAGENTAKeyword_7_0; }
		
		//ORANGE
		public EnumLiteralDeclaration getORANGEEnumLiteralDeclaration_8() { return cORANGEEnumLiteralDeclaration_8; }
		
		//"ORANGE"
		public Keyword getORANGEORANGEKeyword_8_0() { return cORANGEORANGEKeyword_8_0; }
		
		//PINK
		public EnumLiteralDeclaration getPINKEnumLiteralDeclaration_9() { return cPINKEnumLiteralDeclaration_9; }
		
		//"PINK"
		public Keyword getPINKPINKKeyword_9_0() { return cPINKPINKKeyword_9_0; }
		
		//RED
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_10() { return cREDEnumLiteralDeclaration_10; }
		
		//"RED"
		public Keyword getREDREDKeyword_10_0() { return cREDREDKeyword_10_0; }
		
		//WHITE
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_11() { return cWHITEEnumLiteralDeclaration_11; }
		
		//"WHITE"
		public Keyword getWHITEWHITEKeyword_11_0() { return cWHITEWHITEKeyword_11_0; }
		
		//YELLOW
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_12() { return cYELLOWEnumLiteralDeclaration_12; }
		
		//"YELLOW"
		public Keyword getYELLOWYELLOWKeyword_12_0() { return cYELLOWYELLOWKeyword_12_0; }
	}
	public class CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGGreaterThanSignKeyword_3_0 = (Keyword)cGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLLessThanSignKeyword_5_0 = (Keyword)cLEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CompareOperator:
		//	EQ='==' |
		//	NEQ='!=' |
		//	GEQ='>=' |
		//	G='>' |
		//	LEQ='<=' |
		//	L='<';
		public EnumRule getRule() { return rule; }
		
		//EQ='==' | NEQ='!=' | GEQ='>=' | G='>' | LEQ='<=' | L='<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ='=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NEQ='!='
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_1() { return cNEQEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNEQExclamationMarkEqualsSignKeyword_1_0() { return cNEQExclamationMarkEqualsSignKeyword_1_0; }
		
		//GEQ='>='
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_2() { return cGEQEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_2_0() { return cGEQGreaterThanSignEqualsSignKeyword_2_0; }
		
		//G='>'
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_3() { return cGEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGGreaterThanSignKeyword_3_0() { return cGGreaterThanSignKeyword_3_0; }
		
		//LEQ='<='
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_4() { return cLEQEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLEQLessThanSignEqualsSignKeyword_4_0() { return cLEQLessThanSignEqualsSignKeyword_4_0; }
		
		//L='<'
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_5() { return cLEnumLiteralDeclaration_5; }
		
		//'<'
		public Keyword getLLessThanSignKeyword_5_0() { return cLLessThanSignKeyword_5_0; }
	}
	
	private final MissionElements pMission;
	private final TaskElements pTask;
	private final IgnorablesElements pIgnorables;
	private final SensorTypeElements pSensorType;
	private final ColorSensorElements pColorSensor;
	private final TouchSensorElements pTouchSensor;
	private final UltrasonicSensorElements pUltrasonicSensor;
	private final TerminalRule tDECIMAL;
	private final TouchSensorSidesElements eTouchSensorSides;
	private final ActionsElements eActions;
	private final DirectionsElements eDirections;
	private final ColorsElements eColors;
	private final CompareOperatorElements eCompareOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMission = new MissionElements();
		this.pTask = new TaskElements();
		this.pIgnorables = new IgnorablesElements();
		this.pSensorType = new SensorTypeElements();
		this.pColorSensor = new ColorSensorElements();
		this.pTouchSensor = new TouchSensorElements();
		this.pUltrasonicSensor = new UltrasonicSensorElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "robot.ev3.Dsl.DECIMAL");
		this.eTouchSensorSides = new TouchSensorSidesElements();
		this.eActions = new ActionsElements();
		this.eDirections = new DirectionsElements();
		this.eColors = new ColorsElements();
		this.eCompareOperator = new CompareOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("robot.ev3.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * A mission consists of a number of behaviors
	// * / Mission:
	//	'Mission:' tasks+=Task+;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	/// *
	// * Mission DetectColourLakeAndMeasure
	// * Task findLake 
	// * Uses ColorSensor On New DetectedColor is: [kleuren] Do: Measure
	// * 
	// * Mission DetectRocksAndMeasure
	// * Task findRock
	// * Uses TouchSensor On TouchedSide [Any] Do: Measure
	// * 
	// * Mission CleanUpLightWeightRocks
	// * Task pushRocks
	// * Uses TouchSensor On TouchedSide [Any] Do: DriveToEdge
	// * Not AvoidObjects
	// * 
	// * [Optional]
	// * Mission ParkInCorner
	// * Task findEdge
	// * Do: DriveToEdge Do: TurnLeft Do: DriveToEdge Do: Stop 
	// * 
	// * / / *
	// * A behavior consists of a name, an optional type (in case of driving), an optional priority
	// * and a take control definition.
	// * / Task:
	//	'Task:' name=ID ('Uses:' sensor=SensorType)?
	//	'Do:' action=Actions
	//	'Not:' ignoreBehavior?=Ignorables;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Ignorables:
	//	AVOID_OBJECTS="AvoidObjects";
	public IgnorablesElements getIgnorablesAccess() {
		return pIgnorables;
	}
	
	public ParserRule getIgnorablesRule() {
		return getIgnorablesAccess().getRule();
	}
	
	//SensorType:
	//	ColorSensor | TouchSensor | UltrasonicSensor;
	public SensorTypeElements getSensorTypeAccess() {
		return pSensorType;
	}
	
	public ParserRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//ColorSensor:
	//	'ColorSensor' 'On' 'DetectedColor' 'is:' key=Colors;
	public ColorSensorElements getColorSensorAccess() {
		return pColorSensor;
	}
	
	public ParserRule getColorSensorRule() {
		return getColorSensorAccess().getRule();
	}
	
	//TouchSensor:
	//	'TouchSensor' 'On' 'TouchedSide:' key=TouchSensorSides;
	public TouchSensorElements getTouchSensorAccess() {
		return pTouchSensor;
	}
	
	public ParserRule getTouchSensorRule() {
		return getTouchSensorAccess().getRule();
	}
	
	//UltrasonicSensor:
	//	'USensor' 'On' 'Distance:' comparator=CompareOperator distance=DECIMAL;
	public UltrasonicSensorElements getUltrasonicSensorAccess() {
		return pUltrasonicSensor;
	}
	
	public ParserRule getUltrasonicSensorRule() {
		return getUltrasonicSensorAccess().getRule();
	}
	
	//terminal DECIMAL:
	//	INT '.' INT;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//enum TouchSensorSides:
	//	LEFT |
	//	RIGHT |
	//	BOTH;
	public TouchSensorSidesElements getTouchSensorSidesAccess() {
		return eTouchSensorSides;
	}
	
	public EnumRule getTouchSensorSidesRule() {
		return getTouchSensorSidesAccess().getRule();
	}
	
	//enum Actions:
	//	ROTATE_L="ROTATELEFT" |
	//	ROTATE_R="ROTATERIGHT" |
	//	DRIVE_FORWARD="DRIVEFORWARD" |
	//	DRIVE_BACKWARD="DRIVEBACKWARD" |
	//	STOP_DRIVING="STOP" |
	//	TURN_AROUND="TURNAROUND" |
	//	BEEP |
	//	MEASURE |
	//	DRIVETOEDGE;
	public ActionsElements getActionsAccess() {
		return eActions;
	}
	
	public EnumRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//enum Directions:
	//	N |
	//	NE |
	//	E |
	//	SE |
	//	S |
	//	SW |
	//	W |
	//	NW;
	public DirectionsElements getDirectionsAccess() {
		return eDirections;
	}
	
	public EnumRule getDirectionsRule() {
		return getDirectionsAccess().getRule();
	}
	
	//enum Colors:
	//	BLACK |
	//	BLUE |
	//	CYAN |
	//	DARK_GRAY |
	//	GRAY |
	//	GREEN |
	//	LIGHT_GRAY |
	//	MAGENTA |
	//	ORANGE |
	//	PINK |
	//	RED |
	//	WHITE |
	//	YELLOW;
	public ColorsElements getColorsAccess() {
		return eColors;
	}
	
	public EnumRule getColorsRule() {
		return getColorsAccess().getRule();
	}
	
	//enum CompareOperator:
	//	EQ='==' |
	//	NEQ='!=' |
	//	GEQ='>=' |
	//	G='>' |
	//	LEQ='<=' |
	//	L='<';
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
