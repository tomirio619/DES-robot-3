/**
 * generated by Xtext 2.10.0
 */
package robot.ev3.dls.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import robot.ev3.dls.CompareOperator;
import robot.ev3.dls.DlsPackage;
import robot.ev3.dls.MeasurableCondition;
import robot.ev3.dls.Measurables;
import robot.ev3.dls.MeasurementUnit;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Measurable Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link robot.ev3.dls.impl.MeasurableConditionImpl#getMeasurable <em>Measurable</em>}</li>
 *   <li>{@link robot.ev3.dls.impl.MeasurableConditionImpl#getUnit <em>Unit</em>}</li>
 *   <li>{@link robot.ev3.dls.impl.MeasurableConditionImpl#getValue <em>Value</em>}</li>
 *   <li>{@link robot.ev3.dls.impl.MeasurableConditionImpl#getOperator <em>Operator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MeasurableConditionImpl extends MinimalEObjectImpl.Container implements MeasurableCondition
{
  /**
   * The default value of the '{@link #getMeasurable() <em>Measurable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasurable()
   * @generated
   * @ordered
   */
  protected static final Measurables MEASURABLE_EDEFAULT = Measurables.FLOOR_COLOR;

  /**
   * The cached value of the '{@link #getMeasurable() <em>Measurable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasurable()
   * @generated
   * @ordered
   */
  protected Measurables measurable = MEASURABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected static final MeasurementUnit UNIT_EDEFAULT = MeasurementUnit.DISTANCE;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected MeasurementUnit unit = UNIT_EDEFAULT;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final CompareOperator OPERATOR_EDEFAULT = CompareOperator.EQ;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected CompareOperator operator = OPERATOR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MeasurableConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DlsPackage.Literals.MEASURABLE_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Measurables getMeasurable()
  {
    return measurable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMeasurable(Measurables newMeasurable)
  {
    Measurables oldMeasurable = measurable;
    measurable = newMeasurable == null ? MEASURABLE_EDEFAULT : newMeasurable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DlsPackage.MEASURABLE_CONDITION__MEASURABLE, oldMeasurable, measurable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MeasurementUnit getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnit(MeasurementUnit newUnit)
  {
    MeasurementUnit oldUnit = unit;
    unit = newUnit == null ? UNIT_EDEFAULT : newUnit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DlsPackage.MEASURABLE_CONDITION__UNIT, oldUnit, unit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DlsPackage.MEASURABLE_CONDITION__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompareOperator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(CompareOperator newOperator)
  {
    CompareOperator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DlsPackage.MEASURABLE_CONDITION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DlsPackage.MEASURABLE_CONDITION__MEASURABLE:
        return getMeasurable();
      case DlsPackage.MEASURABLE_CONDITION__UNIT:
        return getUnit();
      case DlsPackage.MEASURABLE_CONDITION__VALUE:
        return getValue();
      case DlsPackage.MEASURABLE_CONDITION__OPERATOR:
        return getOperator();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DlsPackage.MEASURABLE_CONDITION__MEASURABLE:
        setMeasurable((Measurables)newValue);
        return;
      case DlsPackage.MEASURABLE_CONDITION__UNIT:
        setUnit((MeasurementUnit)newValue);
        return;
      case DlsPackage.MEASURABLE_CONDITION__VALUE:
        setValue((String)newValue);
        return;
      case DlsPackage.MEASURABLE_CONDITION__OPERATOR:
        setOperator((CompareOperator)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DlsPackage.MEASURABLE_CONDITION__MEASURABLE:
        setMeasurable(MEASURABLE_EDEFAULT);
        return;
      case DlsPackage.MEASURABLE_CONDITION__UNIT:
        setUnit(UNIT_EDEFAULT);
        return;
      case DlsPackage.MEASURABLE_CONDITION__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case DlsPackage.MEASURABLE_CONDITION__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DlsPackage.MEASURABLE_CONDITION__MEASURABLE:
        return measurable != MEASURABLE_EDEFAULT;
      case DlsPackage.MEASURABLE_CONDITION__UNIT:
        return unit != UNIT_EDEFAULT;
      case DlsPackage.MEASURABLE_CONDITION__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
      case DlsPackage.MEASURABLE_CONDITION__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (measurable: ");
    result.append(measurable);
    result.append(", unit: ");
    result.append(unit);
    result.append(", value: ");
    result.append(value);
    result.append(", operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //MeasurableConditionImpl
