/**
 * generated by Xtext 2.10.0
 */
package robot.ev3.dls.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import robot.ev3.dls.Actions;
import robot.ev3.dls.Behavior;
import robot.ev3.dls.BehaviorTypes;
import robot.ev3.dls.BinaryBooleanOperator;
import robot.ev3.dls.BooleanExpression;
import robot.ev3.dls.BooleanExpressionBracket;
import robot.ev3.dls.BooleanExpressionConstant;
import robot.ev3.dls.Colors;
import robot.ev3.dls.CompareOperator;
import robot.ev3.dls.Directions;
import robot.ev3.dls.DlsFactory;
import robot.ev3.dls.DlsPackage;
import robot.ev3.dls.ExpressionAddition;
import robot.ev3.dls.ExpressionBinOp;
import robot.ev3.dls.ExpressionBracket;
import robot.ev3.dls.ExpressionCompOp;
import robot.ev3.dls.ExpressionConstantInt;
import robot.ev3.dls.ExpressionDivision;
import robot.ev3.dls.ExpressionMaximum;
import robot.ev3.dls.ExpressionMinimum;
import robot.ev3.dls.ExpressionMinus;
import robot.ev3.dls.ExpressionModulo;
import robot.ev3.dls.ExpressionMultiply;
import robot.ev3.dls.ExpressionPlus;
import robot.ev3.dls.ExpressionPower;
import robot.ev3.dls.ExpressionSubtraction;
import robot.ev3.dls.IntExpression;
import robot.ev3.dls.MeasurableCondition;
import robot.ev3.dls.MeasurableConditions;
import robot.ev3.dls.Measurables;
import robot.ev3.dls.MeasurementUnit;
import robot.ev3.dls.Mission;
import robot.ev3.dls.NotExpression;
import robot.ev3.dls.TakeControl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DlsPackageImpl extends EPackageImpl implements DlsPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass missionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass behaviorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass takeControlEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass measurableConditionsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass measurableConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass intExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionMinusEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionPlusEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionBracketEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionConstantIntEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanExpressionBracketEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanExpressionConstantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionAdditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionSubtractionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionMultiplyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionDivisionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionMaximumEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionMinimumEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionModuloEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionPowerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionBinOpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionCompOpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum measurementUnitEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum behaviorTypesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum measurablesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum actionsEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum directionsEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum colorsEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum binaryBooleanOperatorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum compareOperatorEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see robot.ev3.dls.DlsPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private DlsPackageImpl()
  {
    super(eNS_URI, DlsFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link DlsPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static DlsPackage init()
  {
    if (isInited) return (DlsPackage)EPackage.Registry.INSTANCE.getEPackage(DlsPackage.eNS_URI);

    // Obtain or create and register package
    DlsPackageImpl theDlsPackage = (DlsPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof DlsPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new DlsPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theDlsPackage.createPackageContents();

    // Initialize created meta-data
    theDlsPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theDlsPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(DlsPackage.eNS_URI, theDlsPackage);
    return theDlsPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMission()
  {
    return missionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMission_BehaviorList()
  {
    return (EReference)missionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBehavior()
  {
    return behaviorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBehavior_Name()
  {
    return (EAttribute)behaviorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBehavior_BehaviorType()
  {
    return (EAttribute)behaviorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBehavior_Prio()
  {
    return (EAttribute)behaviorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBehavior_Control()
  {
    return (EReference)behaviorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBehavior_Actions()
  {
    return (EAttribute)behaviorEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTakeControl()
  {
    return takeControlEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTakeControl_Takecontrol()
  {
    return (EReference)takeControlEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMeasurableConditions()
  {
    return measurableConditionsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMeasurableConditions_MeasurableConditions()
  {
    return (EReference)measurableConditionsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMeasurableCondition()
  {
    return measurableConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMeasurableCondition_Measurable()
  {
    return (EAttribute)measurableConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMeasurableCondition_Unit()
  {
    return (EAttribute)measurableConditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMeasurableCondition_Value()
  {
    return (EAttribute)measurableConditionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMeasurableCondition_Operator()
  {
    return (EAttribute)measurableConditionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIntExpression()
  {
    return intExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionMinus()
  {
    return expressionMinusEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMinus_Sub()
  {
    return (EReference)expressionMinusEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionPlus()
  {
    return expressionPlusEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPlus_Sub()
  {
    return (EReference)expressionPlusEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionBracket()
  {
    return expressionBracketEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionBracket_Sub()
  {
    return (EReference)expressionBracketEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionConstantInt()
  {
    return expressionConstantIntEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionConstantInt_Value()
  {
    return (EAttribute)expressionConstantIntEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBooleanExpression()
  {
    return booleanExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNotExpression()
  {
    return notExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNotExpression_Sub()
  {
    return (EReference)notExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBooleanExpressionBracket()
  {
    return booleanExpressionBracketEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBooleanExpressionBracket_Sub()
  {
    return (EReference)booleanExpressionBracketEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBooleanExpressionConstant()
  {
    return booleanExpressionConstantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBooleanExpressionConstant_Value()
  {
    return (EAttribute)booleanExpressionConstantEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionAddition()
  {
    return expressionAdditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionAddition_Left()
  {
    return (EReference)expressionAdditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionAddition_Right()
  {
    return (EReference)expressionAdditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionSubtraction()
  {
    return expressionSubtractionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionSubtraction_Left()
  {
    return (EReference)expressionSubtractionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionSubtraction_Right()
  {
    return (EReference)expressionSubtractionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionMultiply()
  {
    return expressionMultiplyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMultiply_Left()
  {
    return (EReference)expressionMultiplyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMultiply_Right()
  {
    return (EReference)expressionMultiplyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionDivision()
  {
    return expressionDivisionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionDivision_Left()
  {
    return (EReference)expressionDivisionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionDivision_Right()
  {
    return (EReference)expressionDivisionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionMaximum()
  {
    return expressionMaximumEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMaximum_Left()
  {
    return (EReference)expressionMaximumEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMaximum_Right()
  {
    return (EReference)expressionMaximumEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionMinimum()
  {
    return expressionMinimumEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMinimum_Left()
  {
    return (EReference)expressionMinimumEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMinimum_Right()
  {
    return (EReference)expressionMinimumEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionModulo()
  {
    return expressionModuloEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionModulo_Left()
  {
    return (EReference)expressionModuloEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionModulo_Right()
  {
    return (EReference)expressionModuloEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionPower()
  {
    return expressionPowerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPower_Left()
  {
    return (EReference)expressionPowerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPower_Right()
  {
    return (EReference)expressionPowerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionBinOp()
  {
    return expressionBinOpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionBinOp_Left()
  {
    return (EReference)expressionBinOpEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionBinOp_Bop()
  {
    return (EAttribute)expressionBinOpEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionBinOp_Right()
  {
    return (EReference)expressionBinOpEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionCompOp()
  {
    return expressionCompOpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionCompOp_Left()
  {
    return (EReference)expressionCompOpEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionCompOp_Op()
  {
    return (EAttribute)expressionCompOpEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionCompOp_Right()
  {
    return (EReference)expressionCompOpEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getMeasurementUnit()
  {
    return measurementUnitEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getBehaviorTypes()
  {
    return behaviorTypesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getMeasurables()
  {
    return measurablesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getActions()
  {
    return actionsEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getDirections()
  {
    return directionsEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getColors()
  {
    return colorsEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getBinaryBooleanOperator()
  {
    return binaryBooleanOperatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getCompareOperator()
  {
    return compareOperatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DlsFactory getDlsFactory()
  {
    return (DlsFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    missionEClass = createEClass(MISSION);
    createEReference(missionEClass, MISSION__BEHAVIOR_LIST);

    behaviorEClass = createEClass(BEHAVIOR);
    createEAttribute(behaviorEClass, BEHAVIOR__NAME);
    createEAttribute(behaviorEClass, BEHAVIOR__BEHAVIOR_TYPE);
    createEAttribute(behaviorEClass, BEHAVIOR__PRIO);
    createEReference(behaviorEClass, BEHAVIOR__CONTROL);
    createEAttribute(behaviorEClass, BEHAVIOR__ACTIONS);

    takeControlEClass = createEClass(TAKE_CONTROL);
    createEReference(takeControlEClass, TAKE_CONTROL__TAKECONTROL);

    measurableConditionsEClass = createEClass(MEASURABLE_CONDITIONS);
    createEReference(measurableConditionsEClass, MEASURABLE_CONDITIONS__MEASURABLE_CONDITIONS);

    measurableConditionEClass = createEClass(MEASURABLE_CONDITION);
    createEAttribute(measurableConditionEClass, MEASURABLE_CONDITION__MEASURABLE);
    createEAttribute(measurableConditionEClass, MEASURABLE_CONDITION__UNIT);
    createEAttribute(measurableConditionEClass, MEASURABLE_CONDITION__VALUE);
    createEAttribute(measurableConditionEClass, MEASURABLE_CONDITION__OPERATOR);

    intExpressionEClass = createEClass(INT_EXPRESSION);

    expressionMinusEClass = createEClass(EXPRESSION_MINUS);
    createEReference(expressionMinusEClass, EXPRESSION_MINUS__SUB);

    expressionPlusEClass = createEClass(EXPRESSION_PLUS);
    createEReference(expressionPlusEClass, EXPRESSION_PLUS__SUB);

    expressionBracketEClass = createEClass(EXPRESSION_BRACKET);
    createEReference(expressionBracketEClass, EXPRESSION_BRACKET__SUB);

    expressionConstantIntEClass = createEClass(EXPRESSION_CONSTANT_INT);
    createEAttribute(expressionConstantIntEClass, EXPRESSION_CONSTANT_INT__VALUE);

    booleanExpressionEClass = createEClass(BOOLEAN_EXPRESSION);

    notExpressionEClass = createEClass(NOT_EXPRESSION);
    createEReference(notExpressionEClass, NOT_EXPRESSION__SUB);

    booleanExpressionBracketEClass = createEClass(BOOLEAN_EXPRESSION_BRACKET);
    createEReference(booleanExpressionBracketEClass, BOOLEAN_EXPRESSION_BRACKET__SUB);

    booleanExpressionConstantEClass = createEClass(BOOLEAN_EXPRESSION_CONSTANT);
    createEAttribute(booleanExpressionConstantEClass, BOOLEAN_EXPRESSION_CONSTANT__VALUE);

    expressionAdditionEClass = createEClass(EXPRESSION_ADDITION);
    createEReference(expressionAdditionEClass, EXPRESSION_ADDITION__LEFT);
    createEReference(expressionAdditionEClass, EXPRESSION_ADDITION__RIGHT);

    expressionSubtractionEClass = createEClass(EXPRESSION_SUBTRACTION);
    createEReference(expressionSubtractionEClass, EXPRESSION_SUBTRACTION__LEFT);
    createEReference(expressionSubtractionEClass, EXPRESSION_SUBTRACTION__RIGHT);

    expressionMultiplyEClass = createEClass(EXPRESSION_MULTIPLY);
    createEReference(expressionMultiplyEClass, EXPRESSION_MULTIPLY__LEFT);
    createEReference(expressionMultiplyEClass, EXPRESSION_MULTIPLY__RIGHT);

    expressionDivisionEClass = createEClass(EXPRESSION_DIVISION);
    createEReference(expressionDivisionEClass, EXPRESSION_DIVISION__LEFT);
    createEReference(expressionDivisionEClass, EXPRESSION_DIVISION__RIGHT);

    expressionMaximumEClass = createEClass(EXPRESSION_MAXIMUM);
    createEReference(expressionMaximumEClass, EXPRESSION_MAXIMUM__LEFT);
    createEReference(expressionMaximumEClass, EXPRESSION_MAXIMUM__RIGHT);

    expressionMinimumEClass = createEClass(EXPRESSION_MINIMUM);
    createEReference(expressionMinimumEClass, EXPRESSION_MINIMUM__LEFT);
    createEReference(expressionMinimumEClass, EXPRESSION_MINIMUM__RIGHT);

    expressionModuloEClass = createEClass(EXPRESSION_MODULO);
    createEReference(expressionModuloEClass, EXPRESSION_MODULO__LEFT);
    createEReference(expressionModuloEClass, EXPRESSION_MODULO__RIGHT);

    expressionPowerEClass = createEClass(EXPRESSION_POWER);
    createEReference(expressionPowerEClass, EXPRESSION_POWER__LEFT);
    createEReference(expressionPowerEClass, EXPRESSION_POWER__RIGHT);

    expressionBinOpEClass = createEClass(EXPRESSION_BIN_OP);
    createEReference(expressionBinOpEClass, EXPRESSION_BIN_OP__LEFT);
    createEAttribute(expressionBinOpEClass, EXPRESSION_BIN_OP__BOP);
    createEReference(expressionBinOpEClass, EXPRESSION_BIN_OP__RIGHT);

    expressionCompOpEClass = createEClass(EXPRESSION_COMP_OP);
    createEReference(expressionCompOpEClass, EXPRESSION_COMP_OP__LEFT);
    createEAttribute(expressionCompOpEClass, EXPRESSION_COMP_OP__OP);
    createEReference(expressionCompOpEClass, EXPRESSION_COMP_OP__RIGHT);

    // Create enums
    measurementUnitEEnum = createEEnum(MEASUREMENT_UNIT);
    behaviorTypesEEnum = createEEnum(BEHAVIOR_TYPES);
    measurablesEEnum = createEEnum(MEASURABLES);
    actionsEEnum = createEEnum(ACTIONS);
    directionsEEnum = createEEnum(DIRECTIONS);
    colorsEEnum = createEEnum(COLORS);
    binaryBooleanOperatorEEnum = createEEnum(BINARY_BOOLEAN_OPERATOR);
    compareOperatorEEnum = createEEnum(COMPARE_OPERATOR);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    measurableConditionsEClass.getESuperTypes().add(this.getTakeControl());
    expressionMinusEClass.getESuperTypes().add(this.getIntExpression());
    expressionPlusEClass.getESuperTypes().add(this.getIntExpression());
    expressionBracketEClass.getESuperTypes().add(this.getIntExpression());
    expressionConstantIntEClass.getESuperTypes().add(this.getIntExpression());
    notExpressionEClass.getESuperTypes().add(this.getBooleanExpression());
    booleanExpressionBracketEClass.getESuperTypes().add(this.getBooleanExpression());
    booleanExpressionConstantEClass.getESuperTypes().add(this.getBooleanExpression());
    expressionAdditionEClass.getESuperTypes().add(this.getIntExpression());
    expressionSubtractionEClass.getESuperTypes().add(this.getIntExpression());
    expressionMultiplyEClass.getESuperTypes().add(this.getIntExpression());
    expressionDivisionEClass.getESuperTypes().add(this.getIntExpression());
    expressionMaximumEClass.getESuperTypes().add(this.getIntExpression());
    expressionMinimumEClass.getESuperTypes().add(this.getIntExpression());
    expressionModuloEClass.getESuperTypes().add(this.getIntExpression());
    expressionPowerEClass.getESuperTypes().add(this.getIntExpression());
    expressionBinOpEClass.getESuperTypes().add(this.getBooleanExpression());
    expressionCompOpEClass.getESuperTypes().add(this.getBooleanExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(missionEClass, Mission.class, "Mission", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMission_BehaviorList(), this.getBehavior(), null, "behaviorList", null, 0, -1, Mission.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(behaviorEClass, Behavior.class, "Behavior", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBehavior_Name(), ecorePackage.getEString(), "name", null, 0, 1, Behavior.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBehavior_BehaviorType(), this.getBehaviorTypes(), "behaviorType", null, 0, 1, Behavior.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBehavior_Prio(), ecorePackage.getEInt(), "prio", null, 0, 1, Behavior.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBehavior_Control(), this.getTakeControl(), null, "control", null, 0, 1, Behavior.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBehavior_Actions(), this.getActions(), "actions", null, 0, 1, Behavior.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(takeControlEClass, TakeControl.class, "TakeControl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTakeControl_Takecontrol(), this.getBooleanExpression(), null, "takecontrol", null, 0, 1, TakeControl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(measurableConditionsEClass, MeasurableConditions.class, "MeasurableConditions", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMeasurableConditions_MeasurableConditions(), this.getMeasurableCondition(), null, "measurableConditions", null, 0, -1, MeasurableConditions.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(measurableConditionEClass, MeasurableCondition.class, "MeasurableCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMeasurableCondition_Measurable(), this.getMeasurables(), "measurable", null, 0, 1, MeasurableCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMeasurableCondition_Unit(), this.getMeasurementUnit(), "unit", null, 0, 1, MeasurableCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMeasurableCondition_Value(), ecorePackage.getEString(), "value", null, 0, 1, MeasurableCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMeasurableCondition_Operator(), this.getCompareOperator(), "operator", null, 0, 1, MeasurableCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(intExpressionEClass, IntExpression.class, "IntExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expressionMinusEClass, ExpressionMinus.class, "ExpressionMinus", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionMinus_Sub(), this.getIntExpression(), null, "sub", null, 0, 1, ExpressionMinus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionPlusEClass, ExpressionPlus.class, "ExpressionPlus", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionPlus_Sub(), this.getIntExpression(), null, "sub", null, 0, 1, ExpressionPlus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionBracketEClass, ExpressionBracket.class, "ExpressionBracket", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionBracket_Sub(), this.getIntExpression(), null, "sub", null, 0, 1, ExpressionBracket.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionConstantIntEClass, ExpressionConstantInt.class, "ExpressionConstantInt", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpressionConstantInt_Value(), ecorePackage.getEInt(), "value", null, 0, 1, ExpressionConstantInt.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleanExpressionEClass, BooleanExpression.class, "BooleanExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(notExpressionEClass, NotExpression.class, "NotExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNotExpression_Sub(), this.getBooleanExpression(), null, "sub", null, 0, 1, NotExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleanExpressionBracketEClass, BooleanExpressionBracket.class, "BooleanExpressionBracket", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBooleanExpressionBracket_Sub(), this.getBooleanExpression(), null, "sub", null, 0, 1, BooleanExpressionBracket.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleanExpressionConstantEClass, BooleanExpressionConstant.class, "BooleanExpressionConstant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBooleanExpressionConstant_Value(), ecorePackage.getEBoolean(), "value", null, 0, 1, BooleanExpressionConstant.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionAdditionEClass, ExpressionAddition.class, "ExpressionAddition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionAddition_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionAddition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionAddition_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionAddition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionSubtractionEClass, ExpressionSubtraction.class, "ExpressionSubtraction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionSubtraction_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionSubtraction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionSubtraction_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionSubtraction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionMultiplyEClass, ExpressionMultiply.class, "ExpressionMultiply", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionMultiply_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionMultiply.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionMultiply_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionMultiply.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionDivisionEClass, ExpressionDivision.class, "ExpressionDivision", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionDivision_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionDivision.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionDivision_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionDivision.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionMaximumEClass, ExpressionMaximum.class, "ExpressionMaximum", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionMaximum_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionMaximum.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionMaximum_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionMaximum.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionMinimumEClass, ExpressionMinimum.class, "ExpressionMinimum", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionMinimum_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionMinimum.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionMinimum_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionMinimum.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionModuloEClass, ExpressionModulo.class, "ExpressionModulo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionModulo_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionModulo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionModulo_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionModulo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionPowerEClass, ExpressionPower.class, "ExpressionPower", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionPower_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionPower.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionPower_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionPower.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionBinOpEClass, ExpressionBinOp.class, "ExpressionBinOp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionBinOp_Left(), this.getBooleanExpression(), null, "left", null, 0, 1, ExpressionBinOp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionBinOp_Bop(), this.getBinaryBooleanOperator(), "bop", null, 0, 1, ExpressionBinOp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionBinOp_Right(), this.getBooleanExpression(), null, "right", null, 0, 1, ExpressionBinOp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionCompOpEClass, ExpressionCompOp.class, "ExpressionCompOp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionCompOp_Left(), this.getIntExpression(), null, "left", null, 0, 1, ExpressionCompOp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionCompOp_Op(), this.getCompareOperator(), "op", null, 0, 1, ExpressionCompOp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionCompOp_Right(), this.getIntExpression(), null, "right", null, 0, 1, ExpressionCompOp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(measurementUnitEEnum, MeasurementUnit.class, "MeasurementUnit");
    addEEnumLiteral(measurementUnitEEnum, MeasurementUnit.DISTANCE);
    addEEnumLiteral(measurementUnitEEnum, MeasurementUnit.COLOR);
    addEEnumLiteral(measurementUnitEEnum, MeasurementUnit.INT);

    initEEnum(behaviorTypesEEnum, BehaviorTypes.class, "BehaviorTypes");
    addEEnumLiteral(behaviorTypesEEnum, BehaviorTypes.DRIVE);

    initEEnum(measurablesEEnum, Measurables.class, "Measurables");
    addEEnumLiteral(measurablesEEnum, Measurables.FLOOR_COLOR);
    addEEnumLiteral(measurablesEEnum, Measurables.LEFT_TOUCH);
    addEEnumLiteral(measurablesEEnum, Measurables.RIGHT_TOUCH);
    addEEnumLiteral(measurablesEEnum, Measurables.DIST_TO_OBJECT_FRONT);

    initEEnum(actionsEEnum, Actions.class, "Actions");
    addEEnumLiteral(actionsEEnum, Actions.ROTATE_L);
    addEEnumLiteral(actionsEEnum, Actions.ROTATE_R);
    addEEnumLiteral(actionsEEnum, Actions.DRIVE_FORWARD);
    addEEnumLiteral(actionsEEnum, Actions.DRIVE_BACKWARD);
    addEEnumLiteral(actionsEEnum, Actions.STOP_DRIVING);

    initEEnum(directionsEEnum, Directions.class, "Directions");
    addEEnumLiteral(directionsEEnum, Directions.N);
    addEEnumLiteral(directionsEEnum, Directions.NE);
    addEEnumLiteral(directionsEEnum, Directions.E);
    addEEnumLiteral(directionsEEnum, Directions.SE);
    addEEnumLiteral(directionsEEnum, Directions.S);
    addEEnumLiteral(directionsEEnum, Directions.SW);
    addEEnumLiteral(directionsEEnum, Directions.W);
    addEEnumLiteral(directionsEEnum, Directions.NW);

    initEEnum(colorsEEnum, Colors.class, "Colors");
    addEEnumLiteral(colorsEEnum, Colors.BLACK);
    addEEnumLiteral(colorsEEnum, Colors.BLUE);
    addEEnumLiteral(colorsEEnum, Colors.CYAN);
    addEEnumLiteral(colorsEEnum, Colors.DARK_GRAY);
    addEEnumLiteral(colorsEEnum, Colors.GRAY);
    addEEnumLiteral(colorsEEnum, Colors.GREEN);
    addEEnumLiteral(colorsEEnum, Colors.LIGHT_GRAY);
    addEEnumLiteral(colorsEEnum, Colors.MAGENTA);
    addEEnumLiteral(colorsEEnum, Colors.ORANGE);
    addEEnumLiteral(colorsEEnum, Colors.PINK);
    addEEnumLiteral(colorsEEnum, Colors.RED);
    addEEnumLiteral(colorsEEnum, Colors.WHITE);
    addEEnumLiteral(colorsEEnum, Colors.YELLOW);

    initEEnum(binaryBooleanOperatorEEnum, BinaryBooleanOperator.class, "BinaryBooleanOperator");
    addEEnumLiteral(binaryBooleanOperatorEEnum, BinaryBooleanOperator.AND);
    addEEnumLiteral(binaryBooleanOperatorEEnum, BinaryBooleanOperator.OR);

    initEEnum(compareOperatorEEnum, CompareOperator.class, "CompareOperator");
    addEEnumLiteral(compareOperatorEEnum, CompareOperator.EQ);
    addEEnumLiteral(compareOperatorEEnum, CompareOperator.NEQ);
    addEEnumLiteral(compareOperatorEEnum, CompareOperator.GEQ);
    addEEnumLiteral(compareOperatorEEnum, CompareOperator.G);
    addEEnumLiteral(compareOperatorEEnum, CompareOperator.LEQ);
    addEEnumLiteral(compareOperatorEEnum, CompareOperator.L);

    // Create resource
    createResource(eNS_URI);
  }

} //DlsPackageImpl
