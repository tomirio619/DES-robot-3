/**
 * generated by Xtext 2.10.0
 */
package robot.ev3.dls.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import robot.ev3.dls.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DlsFactoryImpl extends EFactoryImpl implements DlsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DlsFactory init()
  {
    try
    {
      DlsFactory theDlsFactory = (DlsFactory)EPackage.Registry.INSTANCE.getEFactory(DlsPackage.eNS_URI);
      if (theDlsFactory != null)
      {
        return theDlsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DlsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DlsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DlsPackage.MISSION: return createMission();
      case DlsPackage.BEHAVIOR: return createBehavior();
      case DlsPackage.TAKE_CONTROL: return createTakeControl();
      case DlsPackage.MEASURABLE_CONDITIONS: return createMeasurableConditions();
      case DlsPackage.MEASURABLE_CONDITION: return createMeasurableCondition();
      case DlsPackage.INT_EXPRESSION: return createIntExpression();
      case DlsPackage.EXPRESSION_MINUS: return createExpressionMinus();
      case DlsPackage.EXPRESSION_PLUS: return createExpressionPlus();
      case DlsPackage.EXPRESSION_BRACKET: return createExpressionBracket();
      case DlsPackage.EXPRESSION_CONSTANT_INT: return createExpressionConstantInt();
      case DlsPackage.BOOLEAN_EXPRESSION: return createBooleanExpression();
      case DlsPackage.NOT_EXPRESSION: return createNotExpression();
      case DlsPackage.BOOLEAN_EXPRESSION_BRACKET: return createBooleanExpressionBracket();
      case DlsPackage.BOOLEAN_EXPRESSION_CONSTANT: return createBooleanExpressionConstant();
      case DlsPackage.EXPRESSION_ADDITION: return createExpressionAddition();
      case DlsPackage.EXPRESSION_SUBTRACTION: return createExpressionSubtraction();
      case DlsPackage.EXPRESSION_MULTIPLY: return createExpressionMultiply();
      case DlsPackage.EXPRESSION_DIVISION: return createExpressionDivision();
      case DlsPackage.EXPRESSION_MAXIMUM: return createExpressionMaximum();
      case DlsPackage.EXPRESSION_MINIMUM: return createExpressionMinimum();
      case DlsPackage.EXPRESSION_MODULO: return createExpressionModulo();
      case DlsPackage.EXPRESSION_POWER: return createExpressionPower();
      case DlsPackage.EXPRESSION_BIN_OP: return createExpressionBinOp();
      case DlsPackage.EXPRESSION_COMP_OP: return createExpressionCompOp();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DlsPackage.MEASUREMENT_UNIT:
        return createMeasurementUnitFromString(eDataType, initialValue);
      case DlsPackage.BEHAVIOR_TYPES:
        return createBehaviorTypesFromString(eDataType, initialValue);
      case DlsPackage.MEASURABLES:
        return createMeasurablesFromString(eDataType, initialValue);
      case DlsPackage.ACTIONS:
        return createActionsFromString(eDataType, initialValue);
      case DlsPackage.DIRECTIONS:
        return createDirectionsFromString(eDataType, initialValue);
      case DlsPackage.COLORS:
        return createColorsFromString(eDataType, initialValue);
      case DlsPackage.BINARY_BOOLEAN_OPERATOR:
        return createBinaryBooleanOperatorFromString(eDataType, initialValue);
      case DlsPackage.COMPARE_OPERATOR:
        return createCompareOperatorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DlsPackage.MEASUREMENT_UNIT:
        return convertMeasurementUnitToString(eDataType, instanceValue);
      case DlsPackage.BEHAVIOR_TYPES:
        return convertBehaviorTypesToString(eDataType, instanceValue);
      case DlsPackage.MEASURABLES:
        return convertMeasurablesToString(eDataType, instanceValue);
      case DlsPackage.ACTIONS:
        return convertActionsToString(eDataType, instanceValue);
      case DlsPackage.DIRECTIONS:
        return convertDirectionsToString(eDataType, instanceValue);
      case DlsPackage.COLORS:
        return convertColorsToString(eDataType, instanceValue);
      case DlsPackage.BINARY_BOOLEAN_OPERATOR:
        return convertBinaryBooleanOperatorToString(eDataType, instanceValue);
      case DlsPackage.COMPARE_OPERATOR:
        return convertCompareOperatorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mission createMission()
  {
    MissionImpl mission = new MissionImpl();
    return mission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Behavior createBehavior()
  {
    BehaviorImpl behavior = new BehaviorImpl();
    return behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TakeControl createTakeControl()
  {
    TakeControlImpl takeControl = new TakeControlImpl();
    return takeControl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MeasurableConditions createMeasurableConditions()
  {
    MeasurableConditionsImpl measurableConditions = new MeasurableConditionsImpl();
    return measurableConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MeasurableCondition createMeasurableCondition()
  {
    MeasurableConditionImpl measurableCondition = new MeasurableConditionImpl();
    return measurableCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntExpression createIntExpression()
  {
    IntExpressionImpl intExpression = new IntExpressionImpl();
    return intExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionMinus createExpressionMinus()
  {
    ExpressionMinusImpl expressionMinus = new ExpressionMinusImpl();
    return expressionMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionPlus createExpressionPlus()
  {
    ExpressionPlusImpl expressionPlus = new ExpressionPlusImpl();
    return expressionPlus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionBracket createExpressionBracket()
  {
    ExpressionBracketImpl expressionBracket = new ExpressionBracketImpl();
    return expressionBracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionConstantInt createExpressionConstantInt()
  {
    ExpressionConstantIntImpl expressionConstantInt = new ExpressionConstantIntImpl();
    return expressionConstantInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExpression createBooleanExpression()
  {
    BooleanExpressionImpl booleanExpression = new BooleanExpressionImpl();
    return booleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExpressionBracket createBooleanExpressionBracket()
  {
    BooleanExpressionBracketImpl booleanExpressionBracket = new BooleanExpressionBracketImpl();
    return booleanExpressionBracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExpressionConstant createBooleanExpressionConstant()
  {
    BooleanExpressionConstantImpl booleanExpressionConstant = new BooleanExpressionConstantImpl();
    return booleanExpressionConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionAddition createExpressionAddition()
  {
    ExpressionAdditionImpl expressionAddition = new ExpressionAdditionImpl();
    return expressionAddition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionSubtraction createExpressionSubtraction()
  {
    ExpressionSubtractionImpl expressionSubtraction = new ExpressionSubtractionImpl();
    return expressionSubtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionMultiply createExpressionMultiply()
  {
    ExpressionMultiplyImpl expressionMultiply = new ExpressionMultiplyImpl();
    return expressionMultiply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionDivision createExpressionDivision()
  {
    ExpressionDivisionImpl expressionDivision = new ExpressionDivisionImpl();
    return expressionDivision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionMaximum createExpressionMaximum()
  {
    ExpressionMaximumImpl expressionMaximum = new ExpressionMaximumImpl();
    return expressionMaximum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionMinimum createExpressionMinimum()
  {
    ExpressionMinimumImpl expressionMinimum = new ExpressionMinimumImpl();
    return expressionMinimum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionModulo createExpressionModulo()
  {
    ExpressionModuloImpl expressionModulo = new ExpressionModuloImpl();
    return expressionModulo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionPower createExpressionPower()
  {
    ExpressionPowerImpl expressionPower = new ExpressionPowerImpl();
    return expressionPower;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionBinOp createExpressionBinOp()
  {
    ExpressionBinOpImpl expressionBinOp = new ExpressionBinOpImpl();
    return expressionBinOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionCompOp createExpressionCompOp()
  {
    ExpressionCompOpImpl expressionCompOp = new ExpressionCompOpImpl();
    return expressionCompOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MeasurementUnit createMeasurementUnitFromString(EDataType eDataType, String initialValue)
  {
    MeasurementUnit result = MeasurementUnit.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMeasurementUnitToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BehaviorTypes createBehaviorTypesFromString(EDataType eDataType, String initialValue)
  {
    BehaviorTypes result = BehaviorTypes.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBehaviorTypesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Measurables createMeasurablesFromString(EDataType eDataType, String initialValue)
  {
    Measurables result = Measurables.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMeasurablesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actions createActionsFromString(EDataType eDataType, String initialValue)
  {
    Actions result = Actions.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertActionsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Directions createDirectionsFromString(EDataType eDataType, String initialValue)
  {
    Directions result = Directions.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDirectionsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Colors createColorsFromString(EDataType eDataType, String initialValue)
  {
    Colors result = Colors.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryBooleanOperator createBinaryBooleanOperatorFromString(EDataType eDataType, String initialValue)
  {
    BinaryBooleanOperator result = BinaryBooleanOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBinaryBooleanOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompareOperator createCompareOperatorFromString(EDataType eDataType, String initialValue)
  {
    CompareOperator result = CompareOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCompareOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DlsPackage getDlsPackage()
  {
    return (DlsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DlsPackage getPackage()
  {
    return DlsPackage.eINSTANCE;
  }

} //DlsFactoryImpl
