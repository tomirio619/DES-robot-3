/**
 * generated by Xtext 2.10.0
 */
package robot.ev3.dls.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import robot.ev3.dls.BooleanExpression;
import robot.ev3.dls.DlsPackage;
import robot.ev3.dls.TakeControl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Take Control</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link robot.ev3.dls.impl.TakeControlImpl#getTakecontrol <em>Takecontrol</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TakeControlImpl extends MinimalEObjectImpl.Container implements TakeControl
{
  /**
   * The cached value of the '{@link #getTakecontrol() <em>Takecontrol</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTakecontrol()
   * @generated
   * @ordered
   */
  protected BooleanExpression takecontrol;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TakeControlImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DlsPackage.Literals.TAKE_CONTROL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExpression getTakecontrol()
  {
    return takecontrol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTakecontrol(BooleanExpression newTakecontrol, NotificationChain msgs)
  {
    BooleanExpression oldTakecontrol = takecontrol;
    takecontrol = newTakecontrol;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DlsPackage.TAKE_CONTROL__TAKECONTROL, oldTakecontrol, newTakecontrol);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTakecontrol(BooleanExpression newTakecontrol)
  {
    if (newTakecontrol != takecontrol)
    {
      NotificationChain msgs = null;
      if (takecontrol != null)
        msgs = ((InternalEObject)takecontrol).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DlsPackage.TAKE_CONTROL__TAKECONTROL, null, msgs);
      if (newTakecontrol != null)
        msgs = ((InternalEObject)newTakecontrol).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DlsPackage.TAKE_CONTROL__TAKECONTROL, null, msgs);
      msgs = basicSetTakecontrol(newTakecontrol, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DlsPackage.TAKE_CONTROL__TAKECONTROL, newTakecontrol, newTakecontrol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DlsPackage.TAKE_CONTROL__TAKECONTROL:
        return basicSetTakecontrol(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DlsPackage.TAKE_CONTROL__TAKECONTROL:
        return getTakecontrol();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DlsPackage.TAKE_CONTROL__TAKECONTROL:
        setTakecontrol((BooleanExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DlsPackage.TAKE_CONTROL__TAKECONTROL:
        setTakecontrol((BooleanExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DlsPackage.TAKE_CONTROL__TAKECONTROL:
        return takecontrol != null;
    }
    return super.eIsSet(featureID);
  }

} //TakeControlImpl
