/*
 * generated by Xtext 2.10.0
 */
package robot.ev3.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import robot.ev3.ide.contentassist.antlr.internal.InternalDslParser;
import robot.ev3.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Inject
	private DslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTakeControlAccess().getAlternatives(), "rule__TakeControl__Alternatives");
					put(grammarAccess.getExpressionLevel1Access().getAlternatives_1(), "rule__ExpressionLevel1__Alternatives_1");
					put(grammarAccess.getExpressionLevel2Access().getAlternatives_1(), "rule__ExpressionLevel2__Alternatives_1");
					put(grammarAccess.getExpressionLevel4Access().getAlternatives(), "rule__ExpressionLevel4__Alternatives");
					put(grammarAccess.getExpressionLevel5Access().getAlternatives(), "rule__ExpressionLevel5__Alternatives");
					put(grammarAccess.getBooleanExpressionLevel2Access().getAlternatives(), "rule__BooleanExpressionLevel2__Alternatives");
					put(grammarAccess.getBooleanExpressionLevel3Access().getAlternatives(), "rule__BooleanExpressionLevel3__Alternatives");
					put(grammarAccess.getMeasurementUnitAccess().getAlternatives(), "rule__MeasurementUnit__Alternatives");
					put(grammarAccess.getMeasurablesAccess().getAlternatives(), "rule__Measurables__Alternatives");
					put(grammarAccess.getActionsAccess().getAlternatives(), "rule__Actions__Alternatives");
					put(grammarAccess.getDirectionsAccess().getAlternatives(), "rule__Directions__Alternatives");
					put(grammarAccess.getColorsAccess().getAlternatives(), "rule__Colors__Alternatives");
					put(grammarAccess.getBinaryBooleanOperatorAccess().getAlternatives(), "rule__BinaryBooleanOperator__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getBehaviorAccess().getGroup(), "rule__Behavior__Group__0");
					put(grammarAccess.getMeasurableConditionAccess().getGroup(), "rule__MeasurableCondition__Group__0");
					put(grammarAccess.getExpressionLevel1Access().getGroup(), "rule__ExpressionLevel1__Group__0");
					put(grammarAccess.getExpressionLevel1Access().getGroup_1_0(), "rule__ExpressionLevel1__Group_1_0__0");
					put(grammarAccess.getExpressionLevel1Access().getGroup_1_1(), "rule__ExpressionLevel1__Group_1_1__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup(), "rule__ExpressionLevel2__Group__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_0(), "rule__ExpressionLevel2__Group_1_0__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_1(), "rule__ExpressionLevel2__Group_1_1__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_2(), "rule__ExpressionLevel2__Group_1_2__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_3(), "rule__ExpressionLevel2__Group_1_3__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_4(), "rule__ExpressionLevel2__Group_1_4__0");
					put(grammarAccess.getExpressionLevel3Access().getGroup(), "rule__ExpressionLevel3__Group__0");
					put(grammarAccess.getExpressionLevel3Access().getGroup_1(), "rule__ExpressionLevel3__Group_1__0");
					put(grammarAccess.getExpressionMinusAccess().getGroup(), "rule__ExpressionMinus__Group__0");
					put(grammarAccess.getExpressionPlusAccess().getGroup(), "rule__ExpressionPlus__Group__0");
					put(grammarAccess.getExpressionBracketAccess().getGroup(), "rule__ExpressionBracket__Group__0");
					put(grammarAccess.getBooleanExpressionLevel1Access().getGroup(), "rule__BooleanExpressionLevel1__Group__0");
					put(grammarAccess.getBooleanExpressionLevel1Access().getGroup_1(), "rule__BooleanExpressionLevel1__Group_1__0");
					put(grammarAccess.getNotExpressionAccess().getGroup(), "rule__NotExpression__Group__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
					put(grammarAccess.getBooleanExpressionBracketAccess().getGroup(), "rule__BooleanExpressionBracket__Group__0");
					put(grammarAccess.getMissionAccess().getBehaviorListAssignment(), "rule__Mission__BehaviorListAssignment");
					put(grammarAccess.getBehaviorAccess().getNameAssignment_1(), "rule__Behavior__NameAssignment_1");
					put(grammarAccess.getBehaviorAccess().getBehaviorTypeAssignment_3(), "rule__Behavior__BehaviorTypeAssignment_3");
					put(grammarAccess.getBehaviorAccess().getPrioAssignment_5(), "rule__Behavior__PrioAssignment_5");
					put(grammarAccess.getBehaviorAccess().getControlAssignment_7(), "rule__Behavior__ControlAssignment_7");
					put(grammarAccess.getBehaviorAccess().getActionsAssignment_9(), "rule__Behavior__ActionsAssignment_9");
					put(grammarAccess.getTakeControlAccess().getTakecontrolAssignment_0(), "rule__TakeControl__TakecontrolAssignment_0");
					put(grammarAccess.getMeasurableConditionsAccess().getMeasurableConditionsAssignment(), "rule__MeasurableConditions__MeasurableConditionsAssignment");
					put(grammarAccess.getMeasurableConditionAccess().getMeasurableAssignment_0(), "rule__MeasurableCondition__MeasurableAssignment_0");
					put(grammarAccess.getMeasurableConditionAccess().getUnitAssignment_1(), "rule__MeasurableCondition__UnitAssignment_1");
					put(grammarAccess.getMeasurableConditionAccess().getValueAssignment_2(), "rule__MeasurableCondition__ValueAssignment_2");
					put(grammarAccess.getMeasurableConditionAccess().getOperatorAssignment_3(), "rule__MeasurableCondition__OperatorAssignment_3");
					put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel1__RightAssignment_1_0_2");
					put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel1__RightAssignment_1_1_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel2__RightAssignment_1_0_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel2__RightAssignment_1_1_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_2_2(), "rule__ExpressionLevel2__RightAssignment_1_2_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_3_2(), "rule__ExpressionLevel2__RightAssignment_1_3_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_4_2(), "rule__ExpressionLevel2__RightAssignment_1_4_2");
					put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_2(), "rule__ExpressionLevel3__RightAssignment_1_2");
					put(grammarAccess.getExpressionMinusAccess().getSubAssignment_1(), "rule__ExpressionMinus__SubAssignment_1");
					put(grammarAccess.getExpressionPlusAccess().getSubAssignment_1(), "rule__ExpressionPlus__SubAssignment_1");
					put(grammarAccess.getExpressionBracketAccess().getSubAssignment_1(), "rule__ExpressionBracket__SubAssignment_1");
					put(grammarAccess.getExpressionConstantIntAccess().getValueAssignment(), "rule__ExpressionConstantInt__ValueAssignment");
					put(grammarAccess.getBooleanExpressionLevel1Access().getBopAssignment_1_1(), "rule__BooleanExpressionLevel1__BopAssignment_1_1");
					put(grammarAccess.getBooleanExpressionLevel1Access().getRightAssignment_1_2(), "rule__BooleanExpressionLevel1__RightAssignment_1_2");
					put(grammarAccess.getNotExpressionAccess().getSubAssignment_1(), "rule__NotExpression__SubAssignment_1");
					put(grammarAccess.getComparisonExpressionAccess().getLeftAssignment_1(), "rule__ComparisonExpression__LeftAssignment_1");
					put(grammarAccess.getComparisonExpressionAccess().getOpAssignment_2(), "rule__ComparisonExpression__OpAssignment_2");
					put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_3(), "rule__ComparisonExpression__RightAssignment_3");
					put(grammarAccess.getBooleanExpressionBracketAccess().getSubAssignment_1(), "rule__BooleanExpressionBracket__SubAssignment_1");
					put(grammarAccess.getBooleanExpressionConstantAccess().getValueAssignment(), "rule__BooleanExpressionConstant__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDslParser typedParser = (InternalDslParser) parser;
			typedParser.entryRuleMission();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
